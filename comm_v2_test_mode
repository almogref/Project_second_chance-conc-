%%%-------------------------------------------------------------------
%%% @author Almog Refaeli
%%% @copyright (C) 2019, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 17. Aug 2019 10:33
%%%-------------------------------------------------------------------
-module(comm_v2_test).
-author("Almog Refaeli").

-behaviour(gen_server).

-export([start_link/0]).

-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).


%-----------------------------------------------START-LINK--------------------------------------------------------------
% Start link. Register comm_v2 locally and uploading the server.
%-----------------------------------------------------------------------------------------------------------------------

start_link() -> gen_server:start_link({local, comm_v2_test}, comm_v2_test, [], []).

%------------------------------------------------INIT-------------------------------------------------------------------
% Initial comm_v2 with default fields.
%-----------------------------------------------------------------------------------------------------------------------

init([]) ->
  initial_tables(),
  RequesterPid = spawn(fun() -> requester_idle() end),
  register(requester,RequesterPid),
  {ok, #{numPackets => 0, registers => 0, 1 => dead, 2 => dead, 3 => dead, 4 => dead, list_mem => empty,
    list_of_deads => empty, alives_1 => [4,3,2], alives_4 => [3,2,1], alives_3 => [2,1,4], alives_2 => [1,4,3]}}.

%----------------------------------------------TERMINATE----------------------------------------------------------------
% Terminate function for callback functions that fails or returns a bad value.
%-----------------------------------------------------------------------------------------------------------------------

terminate(Reason, _State) ->
  io:format("Callback function fails. Error message:~n~p ",[Reason]).

%----------------------------------------------CHANGE-CODE--------------------------------------------------------------
% Change code function.
%-----------------------------------------------------------------------------------------------------------------------

code_change(_OldVsn, State, _Extra) ->
  {ok, State}.

%------------------------------------------------CLOSE------------------------------------------------------------------
% Sends close messages to all alive nodes
%-----------------------------------------------------------------------------------------------------------------------

close(Members) ->
  lists:foreach(fun({_,Node}) -> gen_server:cast({flock_v4,Node},stop) end ,Members),
  gen_server:stop(comm).

%---------------------------------------------HANDLE-CALL---------------------------------------------------------------
% The only type of call message we support is in the type of registration by the tuple
% {register,Name}. After 4 slaves registrations we initializing and starting the graphic server.
% More specific handle way:
% gets {register,Node} from the client. sends back {ok,id_number}
% saves the new client in the state, ++ {id_number => {ip_node,Table} , ip_node => id_number
% lists of members get upgrade as well, [ {id_number,ip_node} , ... ]
% registers + 1
%-----------------------------------------------------------------------------------------------------------------------

handle_call(Request,_,State = #{registers := CurrentRegisters, list_mem := Members}) ->
  case Request of
    {register,Name} ->
      RegUpdated = CurrentRegisters + 1,
      if
        (RegUpdated =:= 4) ->
          io:format("SERVER: 4 registers. Name of slave who wants to register: ~p~nId: ~p~n",[Name,RegUpdated]),
          graphic:start_link(comm_v2_test),
          erlang:monitor_node(Name,true),
          gen_server:cast({flock_v4,Name},{connect,RegUpdated}),
          {noreply,State#{registers := RegUpdated, RegUpdated := Name,
            Name => RegUpdated, list_mem := [{RegUpdated,Name}]++Members}};
        true ->
          io:format("SERVER: still not 4 registers. Name of slave who wants to register: ~p~nId: ~p~n",[Name,RegUpdated]),
          erlang:monitor_node(Name,true),
          gen_server:cast({flock_v4,Name},{connect,RegUpdated}),
          {noreply,State#{registers := RegUpdated, RegUpdated := Name,
            Name => RegUpdated, list_mem := [{RegUpdated,Name}]++Members}}
      end;

    _ElseWhere      ->
         {noreply, State}
  end.

%---------------------------------------------HANDLE-CAST---------------------------------------------------------------
% We get the following asynchronous messages-
%
% 1. {package,Data,Id}:  incoming list of data that contains new data on the birds from the sender slave,The data can an
%                        empty list so we cover that possibility in the message passing. When we gets a new package
%                        of data, we upgrade the state of the comm_v2 server with it and sending it to graphic that
%                        takes charge from there.
% ......................................................................................................................

% 2. state:              ask for that current state of the server. We did it for debugging purposes.
%-----------------------------------------------------------------------------------------------------------------------

handle_cast(Msg,State =#{numPackets := Num, registers := NumReg, list_mem := Members}) ->
  case Msg of
    %-------- -{package,Package,Id}-------%
    {package,Package,Id} ->
      if
        Num =:= (NumReg - 1) ->
          io:format("SERVER: numPackets is 4, and the package delivery is from id: ~p~nPackage Info: ~p~n",[Id,Package]),
          ListToSend = ets:foldl(fun(X,List) -> element(2,X) ++ List end, [], table_acc),
          io:format("SERVER: numPackets is 4, the list we sent to graphic is: ~p~n",[ListToSend]),
          gen_server:cast(graphic,{data,Package ++ ListToSend}),
          gen_server:cast(graphic,paint),
          requester!{send,Members},
          io:format("SERVER: numPackets is 4, the server sent a message to the requester with members: ~p~n",[Members]),
          update_tables(Id,Package),
          [TEST1,TEST2,TEST3,TEST4] = test_tables_to_lists(),
          io:format("SERVER: numPackets is 4, updated tables information by lists:~n",[]),
          io:format("SERVER: numPackets is 4, list of birds of id 1: ~p~n",[TEST1]),
          io:format("SERVER: numPackets is 4, list of birds of id 2: ~p~n",[TEST2]),
          io:format("SERVER: numPackets is 4, list of birds of id 3: ~p~n",[TEST3]),
          io:format("SERVER: numPackets is 4, list of birds of id 4: ~p~n",[TEST4]),
          ets:delete_all_objects(table_acc),
          TEST5 = ets:foldl(fun(X,List) -> element(2,X) ++ List end, [], table_acc),
          io:format("SERVER: numPackets is 4, list of birds of in table_acc is: ~p~n",[TEST5]),
          {noreply,State#{numPackets := 0}};
        true ->
          io:format("SERVER: numPackets is: ~p~n",[Num]),
          io:format("SERVER: numPackets is NOT 4, and the package delivery is from id: ~p~nPackage Info: ~p~n",[Id,Package]),
          update_tables(Id,Package),
          [TEST1,TEST2,TEST3,TEST4] = test_tables_to_lists(),
          io:format("SERVER: numPackets is NOT 4, updated tables information by lists:~n",[]),
          io:format("SERVER: numPackets is NOT 4, list of birds of id 1: ~p~n",[TEST1]),
          io:format("SERVER: numPackets is NOT 4, list of birds of id 2: ~p~n",[TEST2]),
          io:format("SERVER: numPackets is NOT 4, list of birds of id 3: ~p~n",[TEST3]),
          io:format("SERVER: numPackets is NOT 4, list of birds of id 4: ~p~n",[TEST4]),
          ets:insert(table_acc,{Id,Package}),
          TEST5 = ets:foldl(fun(X,List) -> element(2,X) ++ List end, [], table_acc),
          io:format("SERVER: numPackets is NOT 4, list of birds of in table_acc is: ~p~n",[TEST5]),
          {noreply,State#{numPackets := Num + 1}}
      end;
    %----------------state----------------%
    state ->
      io:format("The state is:~n~p ",[State]),
      {noreply,State};
    %--------------DONT-CARE--------------%
    _ElseWhere ->
      {noreply,State}
  end.

%-----------------------------------------------HANDLE-INFO-------------------------------------------------------------
% We get the following messages-
%
% 1.{go,FirstData}:    message that received from the graphic server only when the user request to start and send initial
%                      values(Number of birds to start with). We generate randomly locations and send to each slave the
%                      list of locations in his sector which he needs to manage, We do it by sending the tuple
%                      {go,Members} to the requester with the permission to start sending messages to the slaves.
% ......................................................................................................................

% 2.{update,NumToAdd}: message that received from the graphic server when the user wants to add more birds.
%                      We generate new locations randomly and sends them to the slaves that alive. When there is a
%                      slave which is status is "dead" we send his extra new locations to his neighbour(neighbour
%                      definition is clockwise e.g. node area 1 is the neighbour of node area 2).
% ......................................................................................................................

% 3.{nodedown,Node}:   message the received when a slave is down. If all slaves(we have total of 4) are down, we close
%                      the comm_v2 server and graphic, otherwise we initial the procedure of Handle-Crashes.
%                      Handle-Crashes procedure: We transfer all the last income data from the slave who fall to his
%                      neighbour. We delete from the field "list_mem" the slave who fall and delete his ets table from
%                      in the comm_v2 server. As well, we updating the number of nodes alive in the field registers,
%                      and send cast message to the graphic server with the this number.
%-----------------------------------------------------------------------------------------------------------------------

handle_info(Msg,State = #{registers := Num,list_mem := Members ,alives_1 := NE1, alives_2 := NE2, alives_3 := NE3,
  alives_4 := NE4, list_of_deads := ListOfDeads}) ->
  case Msg of
    %----------{go,FirstData}------------%
    {go,FirstData} ->
      io:format("SERVER: got an initial values. First data is: ~p~n",[FirstData]),
      MapLocations = distribute(gen_locations({1300,700},FirstData),{1300,700},[],[],[],[]),
      io:format("SERVER: got an initial values. MapLocations is: ~p~n",[MapLocations]),
      send_initial(MapLocations,members_to_list(Members,[]),State,1),
      io:format("SERVER: got an initial values. The members that sent to the slaves is: ~p~n",[members_to_list(Members,[])]),
      requester!{go,Members},
      io:format("SERVER: got an initial values. The message to the Requster is: ~p~n",[{go,Members}]),
      {noreply,State};
    %----------{update,NumToAdd}------------%
    {update,NumToAdd}  ->
      io:format("SERVER: got an update values. Number of birds to add is: ~p~n",[NumToAdd]),
      [NL1,NL2,NL3,NL4] = distribute(gen_locations({1300,700},NumToAdd),{1300,700},[],[],[],[]),
      if
        Num =:= 4 ->
          io:format("SERVER: send_while function~n",[]),
          send_while(Members,NL1,NL2,NL3,NL4),
          {noreply,State};
        true ->
          io:format("SERVER: re_arange function~n",[]),
          re_arange(State,[NL1,NL2,NL3,NL4],ListOfDeads),
          {noreply,State}
      end;
    %------------{nodedown,Node}------------%
    {nodedown,Node} ->
      if
        Num =:= 1 ->
          gen_server:cast(graphic,stop),
          gen_server:stop(comm);
        true ->
          CrashId = maps:get(Node,State),
          ListOfCrashed = ets:foldl(fun(X,List) -> element(2,X) ++ List end, [], get_table_name(CrashId)),
          io:format("SERVER: node is down. Crash id is: ~p~nList of crashed node is: ~p~n",[CrashId,ListOfCrashed]),
          ets:delete_all_objects(get_table_name(CrashId)),
          TEST1 = ets:foldl(fun(X,List) -> element(2,X) ++ List end, [], get_table_name(CrashId)),
          io:format("SERVER: node is down. The table of the crashed node updated values is: ~p~n",[TEST1]),
          NewMembers = lists:delete({CrashId,Node},Members),
          Neighbour = get_neighbour(CrashId,NE1,NE2,NE3,NE4),
          ets:insert(get_table_name(Neighbour),{CrashId,ListOfCrashed}),
          TEST2 = ets:foldl(fun(X,List) -> element(2,X) ++ List end, [], get_table_name(Neighbour)),
          io:format("SERVER: node is down. The table of the neighbour of the crashed node updated values is: ~p~n",[TEST2]),
          [LI1,LI2,LI3,LI4] = clean_sub_lists(CrashId,NE1,NE2,NE3,NE4),
          gen_server:cast({flock_v4,maps:get(Neighbour,State)},{flock_down,ListOfCrashed,CrashId}),
          {noreply,State#{registers := Num-1, CrashId := dead, Node := dead, list_mem := NewMembers,
            list_of_deads := [CrashId] ++ ListOfDeads, alives_1 := LI1, alives_2 := LI2, alives_3 := LI3,
            alives_4 := LI4}}
      end;
    %----------------stop-----------------%
    stop ->
      close(Members),
      {noreply,State};
    %--------------DONT-CARE--------------%
    _ElseWhere ->
      {noreply,State}
  end.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%------------------------------------------- MAINTENANCE-FUNCTIONS -----------------------------------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%---------------------------------------------GET-TABLE-NAME------------------------------------------------------------
%
%-----------------------------------------------------------------------------------------------------------------------

get_table_name(Id) ->
  case Id of
    1 -> slave_1;
    2 -> slave_2;
    3 -> slave_3;
    4 -> slave_4
  end.

%----------------------------------------------UPDATE-TABLES------------------------------------------------------------
%
%-----------------------------------------------------------------------------------------------------------------------

update_tables(Id,Package) ->
  case Id of
    1 -> ets:insert(slave_1,{1,Package});
    2 -> ets:insert(slave_2,{2,Package});
    3 -> ets:insert(slave_3,{3,Package});
    4 -> ets:insert(slave_4,{4,Package})
  end.

%----------------------------------------------INITIAL-TABLES-----------------------------------------------------------
%
%-----------------------------------------------------------------------------------------------------------------------

initial_tables() ->
  ets:new(table_acc,[set]),
  ets:new(slave_1,[set]),
  ets:new(slave_2,[set]),
  ets:new(slave_3,[set]),
  ets:new(slave_4,[set]).

%----------------------------------------------GEN-LOCATIONS------------------------------------------------------------
% Function that uses gen_location function to generate randomly new locations on the screen.
%-----------------------------------------------------------------------------------------------------------------------

gen_locations(_,0) ->
  [];
gen_locations(Dimensions,N) ->
  [gen_location(Dimensions) | gen_locations(Dimensions,N-1)].

gen_location({Width,Height}) ->
  {rand:uniform(Width),rand:uniform(Height)}.

%-----------------------------------------------DISTRIBUTE--------------------------------------------------------------
% Distribute the locations we generated into the right sectors and arrange it in a list of lists which the first index
% in the output list is the new locations for sector 1, the second index is the new locations for sector 2 and so on.
%-----------------------------------------------------------------------------------------------------------------------

distribute([],_,S1,S2,S3,S4) ->
  [S1,S2,S3,S4];

distribute([Loc|T], Dimensions,S1,S2,S3,S4) ->
  {Width,Height} = Dimensions,
  {X,Y} = Loc,
  Border_W = Width/2,
  Border_H = Height/2,
  if X < Border_W ->
    if Y < Border_H -> distribute(T,Dimensions,S1, S2 ++ [Loc],S3,S4);
      true-> distribute(T,Dimensions,S1, S2,S3 ++ [Loc],S4) end;
    true->
      if Y < Border_H -> distribute(T,Dimensions,S1 ++ [Loc], S2,S3,S4);
        true-> distribute(T,Dimensions,S1, S2,S3 ,S4 ++ [Loc])  end
  end.

%----------------------------------------------GET-NEIGHBOUR------------------------------------------------------------
% Gets the right neighbour of the slave by clockwise definition
%-----------------------------------------------------------------------------------------------------------------------

get_neighbour(CrashId,NE1,NE2,NE3,NE4) ->
  case CrashId of
    1  -> lists:nth(1,NE1);
    2  -> lists:nth(1,NE2);
    3  -> lists:nth(1,NE3);
    4  -> lists:nth(1,NE4)
  end.

%---------------------------------------------CLEAN-SUB-LISTS-----------------------------------------------------------
% Deletes the "dead" slave from all the lists we get. We do it by the id of the "dead" slave.
%-----------------------------------------------------------------------------------------------------------------------

clean_sub_lists(CrashId,NE1,NE2,NE3,NE4) ->
  [lists:delete(CrashId,NE1),lists:delete(CrashId,NE2),lists:delete(CrashId,NE3),lists:delete(CrashId,NE4)].


%-----------------------------------------REQUESTER-LOOP----------------------------------------------------------------
% Area of code for the Requester. This process handles the request for new data of birds from each slave alive that
% connect to comm_v2 server. He asks for package by sending the message {master_request} to the slave.
% This method happening every 35ms.
%-----------------------------------------------------------------------------------------------------------------------

requester_idle() ->
  receive
    {go,Members} -> io:format("REQUESTER: got an initial values. The members is: ~p~n",[Members]);
    Msg            -> io:format("REQUESTER: got an message from the server. The message is: ~p~n",[Msg])
  end.

requester_loop(Members) ->
  loop_by_time(Members),
  receive
    {send,Members} -> timer:sleep(35),requester_loop(Members);
    _   ->            requester_loop(Members)
  end.

loop_by_time([]) ->
  finish_to_send;
loop_by_time([ Node | T ]) ->
  gen_server:cast({flock_v4,element(2,Node)},{master_request}),
  loop_by_time(T).

%------------------------------------------SEND-INITIAL-----------------------------------------------------------------
% Function that sends the first initial data to each slave.
%-----------------------------------------------------------------------------------------------------------------------

send_initial([],_,_,_) ->
  finish_to_send;
send_initial([H|T], Members, State, Offset) ->
  gen_server:cast({flock_v4,maps:get(Offset,State)},{init,H,Members}),
  send_initial(T, Members,State,Offset+1).

%-------------------------------------------SEND-WHILE------------------------------------------------------------------
% Function that sends new locations to add to each slave who connect to comm_v2 server.
%-----------------------------------------------------------------------------------------------------------------------

send_while([],_,_,_,_) ->
  finish_to_send;
send_while([H|T],L1,L2,L3,L4) ->
  case element(1,H) of
    1 -> gen_server:cast({flock_v4,element(2,H)},{insert,L1}),send_while(T,L1,L2,L3,L4);
    2 -> gen_server:cast({flock_v4,element(2,H)},{insert,L2}),send_while(T,L1,L2,L3,L4);
    3 -> gen_server:cast({flock_v4,element(2,H)},{insert,L3}),send_while(T,L1,L2,L3,L4);
    4 -> gen_server:cast({flock_v4,element(2,H)},{insert,L4}),send_while(T,L1,L2,L3,L4)
  end.

%------------------------------------------RE-ARANGE--------------------------------------------------------------------
% This function handles the event when the user wants to add more birds to the frame and we have number of salves who's
% in "dead" mode. We need to send the new generated birds of the "dead" slave to his neighbour.
% NE(i) is lists of alive neighbours(clockwise) of node i.
%-----------------------------------------------------------------------------------------------------------------------

re_arange(_,_,[]) ->
  done_re_arange;
re_arange(State = #{alives_1 := NE1, alives_2 := NE2, alives_3 := NE3, alives_4 := NE4}, MapLocations, [H|T]) ->
  IdToSend =                        case H of
                                      1  -> lists:nth(1,NE1);
                                      2  -> lists:nth(1,NE2);
                                      3  -> lists:nth(1,NE3);
                                      4  -> lists:nth(1,NE4)
                                    end,
  NodeToSend = maps:get(IdToSend,State),
  gen_server:cast({flock_v4,NodeToSend},{insert,lists:nth(H,MapLocations)++lists:nth(IdToSend,MapLocations)}),
  re_arange(State,MapLocations,T).

%------------------------------------------MEMBERS-TO-LIST--------------------------------------------------------------
% Function that gets the map list_mem and returns list of the members alive right now.
%-----------------------------------------------------------------------------------------------------------------------

members_to_list([],Acc) ->
  Acc;
members_to_list([H|T],Acc) ->
  members_to_list(T, [element(2,H)] ++ Acc).



%-----------------------------------------------TESTS-------------------------------------------------------------------
%-----------------------------------------------------------------------------------------------------------------------

test_tables_to_lists() ->
  [ets:foldl(fun(X,List) -> element(2,X) ++ List end, [], slave_1),
   ets:foldl(fun(X,List) -> element(2,X) ++ List end, [], slave_2),
   ets:foldl(fun(X,List) -> element(2,X) ++ List end, [], slave_3),
   ets:foldl(fun(X,List) -> element(2,X) ++ List end, [], slave_4)].
