-module(comm).
-behaviour(gen_server).

-export([start_link/0]).

-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).

-export([handleMore/1]).

% --- gen_server functions -----
% ------------------------------

start_link() -> gen_server:start_link({local, comm}, comm, [], []).

init([]) ->
  {ok, #{numPackets => 0, registers => 0, 1 => {dead,[]}, 2 => {dead,[]}, 3 =>  {dead,[]}, 4 =>  {dead,[]}, list_mem => [], loopi => dead,
    list_of_deads => []}}.

terminate(_Reason, _State) -> ok.

code_change(_OldVsn, State, _Extra) -> {ok, State}.


% sends terminate messages to all alive nodes TO FINISH
close(Members) ->
  lists:foreach(fun({_,Node}) -> gen_server:cast({flock_v4,Node},stop) end ,Members),
  gen_server:stop(comm).


handle_call(Request, _, State = #{registers := OldNum, list_mem := Members}) ->
  case Request of
    % gets {register,Node} from the client. sends back {ok,id_number}
    % saves the new client in the state, ++ {id_number => {{Name,Node},[]} , {Name,Node} => id_number
    % lists of members get upgrade as well, [ {id_number,{Name,Node}} , ... ]
    % registers + 1
    {register,Name} ->
                    if
                      OldNum + 1 =:= 4 ->
                                          graphic:start_link(comm),
                                          erlang:monitor_node(Name,true),
                                          gen_server:cast({flock_v4,Name},{connect,OldNum +1 }),
                                          % Form of message the send to nodes:  {ok,id_number}
                                          % reply to the remote node 'ok' and saves him in the States - { id => node, node => id }
                                          {noreply,State#{registers := OldNum + 1, OldNum + 1 := {Name,[]}, Name => OldNum + 1,
                                          list_mem := [{OldNum + 1,Name}]++ Members}};

                      true ->
                                           erlang:monitor_node(Name,true),
                                           % Form of message the send to nodes:  {ok,id_number}
                                           gen_server:cast({flock_v4,Name},{connect,OldNum + 1}),
                                           {noreply,State#{registers := OldNum + 1, OldNum + 1 := {Name,[]}, Name => OldNum + 1,
                                           list_mem := [{OldNum + 1,Name}]++ Members, alives_1 => [4,3,2], alives_4 => [3,2,1],
                                           alives_3 => [2,1,4], alives_2 => [1,4,3]}}
                    end;

    ________________                    -> {noreply, State}

  end.


handle_cast(_Msg, State = #{numPackets := Num, registers := NumReg}) ->
  case _Msg of
    {package,[],Id}    ->       % This node doesnt have birds. We ignore him and dont send to graphic.
                                {noreply,State};

    {package,Data,Id}  ->       % Gets {package,Id,Data} from the client, sends to graphic.
                                {Node,_} = maps:get(Id,State),
                                io:format("Graphic send data: ~p ~n ",[Data]),
                                gen_server:cast(graphic,{data,Data}),
                                % if number of packets to paint equals to register number so we send the order to paint
                                if
                                  Num =:= NumReg -> gen_server:cast(graphic,paint),{noreply,State#{numPackets :=0,
                                                    Id := {Node,Data}}} ;
                                  true ->           {noreply,State#{numPackets := Num + 1,Id := {Node,Data}}}
                                end;

    state ->                    io:format("The state is: ~p ~n ",[State]),{noreply,State};

    _     ->                    {noreply,State}
  end.


handle_info(Msg, State = #{registers := Num, list_mem := Members, 1 := {N_1,L1}, 2 := {N_2,L2},3 := {N_3,L3}, 4 := {N_4,L4},
            alives_1 := NE1, alives_2 := NE2, alives_3 := NE3, alives_4 := NE4, list_of_deads := ListOfDeads}) ->
  case Msg of
    % creates the process who's gonna handle the asks for more data from other nodes
    {go,FirstData} ->
                            ListOfLocations = gen_Locations({1300,700},FirstData),
                            MapLocations = distribute(ListOfLocations,{1300,700},[],[],[],[]),
                            sendInitial(MapLocations,Members,State,1),
                            % Loopi = spawn(fun() -> askForNewData(Members) end),
                             Loopi = spawn(fun() -> askForNewData(Members,5) end),
                            {noreply,State#{loopi := Loopi, 1 := {N_1,lists:nth(1,MapLocations)},
                            2 := {N_2,lists:nth(2,MapLocations)}, 3 := {N_3,lists:nth(3,MapLocations)},
                            4 := {N_4,lists:nth(4,MapLocations)}}};

    {update,NumToAdd}  ->
                         [NL1,NL2,NL3,NL4]  = handleMore(NumToAdd),  % sends to handle more function with the update registers value
                         if
                         Num =:= 4 ->  sendWhile(Members,NL1,NL2,NL3,NL4),
                                       {noreply,State};
                         % we need to check who is dead
                         true ->       reArange(State,[NL1,NL2,NL3,NL4],ListOfDeads),
                                       {noreply,State}
                        end;

    % The user ask to close the program
     stop ->            close(Members),{noreply,State};

    % node is down :(
    {nodedown, Node} ->
                        if
                          Num =:= 1 ->  gen_server:cast(graphic,stop),close([]); % all nodes crashed. we close the program
                          true ->
                                        CrashId = maps:get(Node,State),
                                        ListOfCrashed = element(2,maps:get(CrashId,State)),
                                        NewMembers = lists:delete({CrashId,Node},Members),
                                        Neighbour = getNeighbour(CrashId,NE1,NE2,NE3,NE4),
                                        [LI1,LI2,LI3,LI4] = cleanSubLists(CrashId,NE1,NE2,NE3,NE4),
                                        [Birds1,Birds2,Birds3,Birds4] = arrangeBirds(CrashId,Neighbour,[L1,L2,L3,L4]),
                                        handleCrashes(ListOfCrashed,element(1,maps:get(Neighbour,State)),CrashId),
                                        gen_server:cast(graphic,{down,Num-1}),
                                        % update the status with the right nodes alive
                                        {noreply,State#{registers := Num - 1, CrashId := {dead,[]}, Node := dead,
                                        list_mem := NewMembers, list_of_deads := [CrashId] ++ ListOfDeads,
                                        alives_1 := LI1, alives_2 := LI2, alives_3 := LI3, alives_4 := LI4,
                                          1 := {N_1,Birds1}, 2 := {N_2,Birds2}, 3 := {N_3,Birds3},
                                          4 := {N_4,Birds4}}}
                        end;
    % dont care
    _    ->             {noreply,State}
  end.


% -------------------------------------------------------------------------
% handle_call - FUNCTIONS
% -------------------------------------------------------------------------

gen_Locations(_,0)->[];
gen_Locations(Dimensions,N)->
  [gen_Location(Dimensions) | gen_Locations(Dimensions,N-1) ].


gen_Location({Width,Height}) -> {rand:uniform(Width),rand:uniform(Height)}.


distribute([],_,S1,S2,S3,S4)-> [S1,S2,S3,S4];

distribute([Loc|T], Dimensions,S1,S2,S3,S4)->
  {Width,Height} = Dimensions,
  {X,Y} = Loc,
  Border_W = Width/2,
  Border_H = Height/2,
  if X < Border_W ->
    if Y < Border_H -> distribute(T,Dimensions,S1, S2 ++ [Loc],S3,S4);
      true-> distribute(T,Dimensions,S1, S2,S3 ++ [Loc],S4) end;
    true->
      if Y < Border_H -> distribute(T,Dimensions,S1 ++ [Loc], S2,S3,S4);
        true-> distribute(T,Dimensions,S1, S2,S3 ,S4 ++ [Loc])  end
  end.


% -------------------------------------------------------------------------
% Form of message the send to nodes:  {add,ListOfCrashed}
% -------------------------------------------------------------------------


% ---- TO ADD ID OF THE MODE WHO'S FALL TO THE TUPLE  ------

 % gets the birds of the crashed node and sends to his neighbour
handleCrashes(ListOfCrashed,NodeToSend,CrashId)  ->
      gen_server:cast({flock_v4,NodeToSend},{flock_down,ListOfCrashed,CrashId}).


arrangeBirds(CrashId,Neighbour,[L1,L2,L3,L4]) ->
  case CrashId of
     1 -> case Neighbour of
              4 -> [[],L2,L3,L4 ++ L1];
              3 -> [[],L2,L3 ++ L1,L4];
              2 -> [[],L2 ++ L1, L3, L4]
          end;
     2 -> case Neighbour of
              1 -> [L1 ++ L2,[],L3,L4];
              3 -> [L1,[],L3 ++ L2, L4];
              4 -> [L1,[],L3,L1 ++ L4]
          end;
     3 -> case Neighbour of
              2 -> [L1,L2 ++ L3, [], L4];
              1 -> [L1 ++ L3, L2, [], L4];
              4 -> [L1, L2, [], L4 ++ L3]
          end;
     4 -> case Neighbour of
              3 -> [L1, L2, L3 ++ L4,[]];
              2 -> [L1, L2 ++ L4, L3, []];
              1 -> [L1 ++ L4, L2, L3, []]
          end
    end.



handleMore(NumToAdd) ->
  ListOfLocations = gen_Locations({1300,700},NumToAdd),
  distribute(ListOfLocations,{1300,700},[],[],[],[]).


% NE(i) is lists of alive neighbours(clockwise) of node i
reArange(State ,_,[]) ->
     State;
reArange(State = #{alives_1 := NE1, alives_2 := NE2, alives_3 := NE3, alives_4 := NE4}, MapLocations, [H|T]) ->
     IdToSend =                        case H of
                                        % GETS THE BIRDS LIST OF THE NEIGHBOUR
                                        1  -> lists:nth(1,NE1);
                                        2  -> lists:nth(1,NE2);
                                        3  -> lists:nth(1,NE3);
                                        4  -> lists:nth(1,NE4)
                                      end,
      NodeToSend = maps:get(IdToSend,State),
      gen_server:cast({flock_v4,element(1,NodeToSend)},{insert,lists:nth(H,MapLocations)++lists:nth(IdToSend,MapLocations)}),
      reArange(State,MapLocations,T).

sendWhile([],_,_,_,_) ->
  done;
sendWhile([H|T],L1,L2,L3,L4) ->
  case element(1,H) of
    1 -> gen_server:cast({flock_v4,element(2,H)},{insert,L1}),sendWhile(T,L1,L2,L3,L4);
    2 -> gen_server:cast({flock_v4,element(2,H)},{insert,L2}),sendWhile(T,L1,L2,L3,L4);
    3 -> gen_server:cast({flock_v4,element(2,H)},{insert,L3}),sendWhile(T,L1,L2,L3,L4);
    4 -> gen_server:cast({flock_v4,element(2,H)},{insert,L4}),sendWhile(T,L1,L2,L3,L4)
  end.



getNeighbour(CrashId,NE1,NE2,NE3,NE4) ->
      case CrashId of
                   1  -> lists:nth(1,NE1);
                   2  -> lists:nth(1,NE2);
                   3  -> lists:nth(1,NE3);
                   4  -> lists:nth(1,NE4)
      end.


cleanSubLists(CrashId,NE1,NE2,NE3,NE4) ->
  [lists:delete(CrashId,NE1),lists:delete(CrashId,NE2),lists:delete(CrashId,NE3),lists:delete(CrashId,NE4)].


% -------------------------------------------------------------------------
% Form of message the send to nodes:  {master_request}
% -------------------------------------------------------------------------

% sends requests to the nodes every 40ms - Form of message {master_request}
%%askForNewData(Members) ->
%%  loopByTime(Members),
%%  timer:sleep(40),
%%  askForNewData(Members).

askForNewData(_,0) -> done;
askForNewData(Members,Counter) ->
  loopByTime(Members),
  timer:sleep(200),
  askForNewData(Members,Counter-1).

loopByTime([]) -> done;
loopByTime([ Node | T ]) ->
    gen_server:cast({flock_v4,element(2,Node)},{master_request}),
    loopByTime(T).

% -------------------------------------------------------------------------
% sends the start data of birds to each node. The message is {start,List}
% -------------------------------------------------------------------------

sendInitial([],_,_,_) ->
    done;
sendInitial([ H | T ], Members, State, Offset) ->
  sendPost(membersToList(Members,[]),H,element(1,maps:get(Offset,State))),
  sendInitial(T, Members,State,Offset+1).

sendPost(Members,List,Member) ->
  gen_server:cast({flock_v4,Member},{init,List,Members}).

membersToList([],Acc) -> Acc;
membersToList([H|T],Acc) ->
  membersToList(T, [element(2,H)] ++ Acc).




