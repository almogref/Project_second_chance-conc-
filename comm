-module(comm).
-behaviour(gen_server).

-export([start_link/0]).

-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
  terminate/2, code_change/3]).

-export([handleMore/2,splitUtilities/2]).

% --- gen_server functions -----
% ------------------------------

start_link() -> gen_server:start_link({local, comm}, comm, [], []).

init([]) ->
  {ok, #{numPackets => 0, registers => 0, 1 => {dead,[]}, 2 => {dead,[]}, 3 =>  {dead,[]}, 4 =>  {dead,[]}, list_mem => [], loopi => dead,
    list_of_deads => []}}.

terminate(_Reason, _State) -> ok.

code_change(_OldVsn, State, _Extra) -> {ok, State}.


% sends terminate messages to all alive nodes TO FINISH
close(Members) ->
  lists:foreach(fun({_,Node}) -> gen_server:cast({flock_v4,Node},stop) end ,Members),
  gen_server:stop(comm).


handle_call(Request, _, State = #{registers := OldNum, list_mem := Members}) ->
  io:format("TEST: call: ~p ~n",[State]),
  case Request of
    % gets {register,Node} from the client. sends back {ok,id_number}
    % saves the new client in the state, ++ {id_number => {{Name,Node},[]} , {Name,Node} => id_number
    % lists of members get upgrade as well, [ {id_number,{Name,Node}} , ... ]
    % registers + 1
    {register,Name} ->
                    if
                      OldNum + 1 =:= 4 -> io:format("TEST:  4 registers: ~p ~n",[State]),
                                          graphic:start_link(comm),
                                          erlang:monitor_node(Name,true),
                                          gen_server:cast({flock_v4,Name},{connect,OldNum + 1}),
                                          % Form of message the send to nodes:  {ok,id_number}
                                          % reply to the remote node 'ok' and saves him in the States - { id => node, node => id }
                                          {noreply,State#{registers := OldNum + 1, OldNum + 1 := {Name,[]}, Name => OldNum + 1,
                                            list_mem := [{OldNum + 1,Name}]++ Members}};

                      true ->             io:format("TEST:  registers: ~p ~n",[Name]),
                                           erlang:monitor_node(Name,true),
                                          % Form of message the send to nodes:  {ok,id_number}
                                           gen_server:cast({flock_v4,Name},{connect,OldNum + 1}),
                                          {noreply,State#{registers := OldNum + 1, OldNum + 1 := {Name,[]}, Name => OldNum + 1,
                                            list_mem := [{OldNum + 1,Name}]++ Members, alives_1 => [4,3,2], alives_4 => [3,2,1],
                                            alives_3 => [2,1,4], alives_2 => [1,4,3]}}
                    end;

    __                   ->    {noreply, State}
  end.


handle_cast(_Msg, State = #{numPackets := Num, registers := NumReg}) ->
  case _Msg of
    % gets {package,Id,Data} from the client, sends to graphic.
    {package,Data}  ->          gen_server:cast(graphic,{data,Data}),
                                io:format("TEST: cast package receive: ~p ~n ~p ~n ",[_Msg,State]),
                                % if number of packets to paint equals to register number so we send the order to paint
                                if
                                  Num =:= NumReg -> gen_server:cast(graphic,paint),{noreply,State#{numPackets :=0}} ;
                                  true ->           {noreply,State#{numPackets := Num + 1}}
                                end;
    _     ->                    {noreply,State}
  end.


handle_info(Msg, State = #{registers := Num, list_mem := Members, 1 := {N_1,_}, 2 := {N_2,_},3 := {N_3,_}, 4 := {N_4,_},
  alives_1 := NE1, alives_2 := NE2, alives_3 := NE3, alives_4 := NE4, list_of_deads := ListOfDeads}) ->
  case Msg of
    % creates the process who's gonna handle the asks for more data from other nodes
    {go,FirstData} ->
                            io:format("TEST: info {go,FirstData} : ~p ~n ~p ~n ",[Msg,State]),
                            ListOfLocations = gen_Locations({250,250},FirstData),
                            MapLocations = distribute(Members,ListOfLocations,{250,250},[],[],[],[]),
                            sendInitial(MapLocations,Members,State),
                            Loopi = spawn(fun() -> askForNewData(Members) end),
                            {noreply,State#{loopi := Loopi, 1 := {N_1,lists:nth(1,MapLocations)},
                            2 := {N_2,lists:nth(2,MapLocations)}, 3 := {N_3,lists:nth(3,MapLocations)},
                            4 := {N_4,lists:nth(4,MapLocations)}}};


    {update,NumToAdd}  ->
                           io:format("TEST: info {update,NumToADD}: ~p ~n ~p ~n ",[Msg,State]),
                         MapLocations = handleMore(NumToAdd,Members),  % sends to handle more function with the update registers value
                         if
                         Num =:= 4 ->
                                     {noreply,State#{ 1 := {N_1,L1 ++ lists:nth(1,MapLocations)},
                                       2 := {N_2,L2 ++ lists:nth(2,MapLocations)}, 3 := {N_3,L3 ++ lists:nth(3,MapLocations)},
                                       4 := {N_4,L4 ++ lists:nth(4,MapLocations)}}};
                         % we need to check who is dead
                         true -> {noreply,reArange(State,MapLocations,NE1,NE2,NE3,NE4,ListOfDeads)}
                        end;

    % The user ask to close the program

     stop ->          io:format("TEST: info stop: ~p ~n ~p ~n ",[Msg,State]),
                      close(Members),{noreply,State};

    % node is down :(

    {nodedown, Node} -> io:format("TEST: info nodedown: ~p ~n ~p ~n ",[Msg,State]),
                        if
                          Num =:= 1 ->  gen_server:cast(graphic,stop),close([]); % all nodes crashed. we close the program
                          true ->
                                        CrashId = maps:get(Node,State),
                                        ListOfCrashed = element(2,maps:get(CrashId,State)),
                                        NewMembers = lists:delete({CrashId,Node},Members),
                                        Neighbour = getNeighbour(CrashId,NE1,NE2,NE3,NE4),
                                        [LI1,LI2,LI3,LI4] = cleanSubLists(CrashId,NE1,NE2,NE3,NE4),
                                        handleCrashes(ListOfCrashed,Neighbour),
                                        gen_server:cast(graphic,{down,Num-1}),
                                        % update the status with the right nodes alive
                                        {noreply,State#{registers := Num - 1, CrashId := {dead,[]}, Node := dead,
                                        list_mem := NewMembers, list_of_deads := [CrashId] ++ ListOfDeads,
                                        alives_1 := LI1, alives_2 := LI2, alives_3 := LI3, alives_4 := LI4 }}
                        end;
    % dont care
    _    ->             io:format("TEST: info else: ~p ~n",[Msg]),{noreply,State}
  end.


% -------------------------------------------------------------------------
% handle_call - FUNCTIONS
% -------------------------------------------------------------------------

splitUtilities(Data,Members) ->
  ListOfLocations = gen_Locations(250,Data),
  distribute(Members,{250,250},ListOfLocations,[],[],[],[]).


gen_Locations(_,0)->[];
gen_Locations(Dimensions,N)->
  [gen_Location(Dimensions) | gen_Locations(Dimensions,N-1) ].


gen_Location({Width,Height}) -> {rand:uniform(Width),rand:uniform(Height)}.


distribute(_,[],_,S1,S2,S3,S4)-> [S1,S2,S3,S4];

distribute(Flocks,[Loc|T], Dimensions,S1,S2,S3,S4)->
  {Width,Height} = Dimensions,
  {X,Y} = Loc,
  Border_W = Width/2,
  Border_H = Height/2,
  if X < Border_W ->
    if Y < Border_H -> distribute(Flocks,T,Dimensions,S1, S2 ++ [Loc],S3,S4);
      true-> distribute(Flocks,T,Dimensions,S1, S2,S3 ++ [Loc],S4) end;
    true->
      if Y < Border_H -> distribute(Flocks,T,Dimensions,S1 ++ [Loc], S2,S3,S4);
        true-> distribute(Flocks,T,Dimensions,S1, S2,S3 ,S4 ++ [Loc])  end
  end.

% -------------------------------------------------------------------------
% Form of message the send to nodes:  {add,ListOfCrashed}
% -------------------------------------------------------------------------


% ---- TO ADD ID OF THE MODE WHO'S FALL TO THE TUPLE  ------

 % gets the birds of the crashed node and sends to his neighbour
handleCrashes(ListOfCrashed,NodeToSend)  ->
      gen_server:cast({flock_v4,NodeToSend},{insert,ListOfCrashed}).

% ---- TO ADD ID OF THE MODE WHO'S FALL TO THE TUPLE  ------



handleMore(NumToAdd,Members) ->
  ListOfLocations = gen_Locations({250,250},NumToAdd),
  distribute(Members,{250,250},ListOfLocations,[],[],[],[]).


% NE(i) is lists of alive neighbours(clockwise) of node i
reArange(State,_,_,_,_,_,[]) ->
  State;
reArange(State,MapLocations,NE1,NE2,NE3,NE4,[H|T]) ->
    {IdToSend,IdDead} =   case H of
                             1  -> {NE1(1),1};
                             2  -> {NE2(1),2};
                             3  -> {NE3(1),3};
                             4  -> {NE4(1),4}
                          end,
      NodeToSend = maps:get(IdToSend,State),
      NewList =  element(2,MapLocations(IdToSend)) ++ element(2,MapLocations(IdDead)),
      gen_server:cast({flock_v4,NodeToSend},{insert,NewList}),
      reArange(State#{IdToSend := {NodeToSend,NewList}},MapLocations,NE1,NE2,NE3,NE4,T).


% We didnt take care if two is down
getNeighbour(CrashId,NE1,NE2,NE3,NE4) ->
      case CrashId of
                   1  -> lists:nth(1,NE1);
                   2  -> lists:nth(1,NE2);
                   3  -> lists:nth(1,NE3);
                   4  -> lists:nth(1,NE4)
      end.



% to check if its allowed not to check if id is in the list first.
cleanSubLists(CrashId,NE1,NE2,NE3,NE4) ->
  [lists:delete(CrashId,NE1),lists:delete(CrashId,NE2),lists:delete(CrashId,NE3),lists:delete(CrashId,NE4)].


% -------------------------------------------------------------------------
% Form of message the send to nodes:  {master_request}
% -------------------------------------------------------------------------


% sends requests to the nodes every 40ms - Form of message {master_request}
askForNewData(Members) ->
  loopByTime(Members),
  timer:sleep(40),
  askForNewData(Members).

loopByTime([]) -> done;
loopByTime([ Node | T ]) ->
    gen_server:cast({flock_v4,Node},{master_request}),
    loopByTime(T).


% -------------------------------------------------------------------------
% sends the start data of birds to each node. The message is {start,List}
% -------------------------------------------------------------------------

sendInitial([],_,_) ->
    done;
sendInitial([ H | T ], Members, State) ->
  sendPost(Members,List,element(1,maps:get(Id,State))),
  sendInitial(T, Members,State).

sendPost(Members,List,Member) ->
  gen_server:cast({flock_v4,Member},{init,List,Members}).



% TO FIX ALL THE MISTYPES LIST(index)



