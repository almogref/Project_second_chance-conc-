%%%-------------------------------------------------------------------
%%% @author almog
%%% @copyright (C) 2019, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 04. Aug 2019 16:22
%%%-------------------------------------------------------------------
-module(graphic).
-behavior(gen_statem).
-author("almog").
-include_lib("wx/include/wx.hrl").

-export([start_link/1]).
-export([waitForData/3,paintData/3]).
-export([terminate/3,code_change/4,init/1,callback_mode/0]).


start_link(COMM) ->
  gen_statem:start_link({local, graphic}, graphic, COMM, []).

init(COMM) ->
  process_flag(trap_exit, true),
  wx:new(),
  WxEnv = wx:get_env(),
  ets:new(birds,[ordered_set]),
  Frame = wxFrame:new(wx:null(), ?wxID_ANY, "Landscape"),
  Sizer = wxBoxSizer:new(?wxVERTICAL),
  Panel = wxPanel:new(Frame,[{pos,{0,0}},{size, {800, 600}}, {style, ?wxFULL_REPAINT_ON_RESIZE}]),
  PanelButtons = wxPanel:new(Frame,[{pos,{10,511}},{size, {220, 85}}]),
  wxSizer:add(Sizer, Panel, [{proportion, 1}, {flag, ?wxEXPAND bor ?wxALL}, {border, 5}]),
  wxFrame:setSizer(Frame, Sizer),
  wxSizer:setSizeHints(Sizer, Frame),
  Canvas = wxPanel:new(Panel, [{size, {800, 485}}]),
  spawn_link(fun()-> set_buttons(PanelButtons, WxEnv,COMM) end),
  BirdsImages = loadBirds(),
  wxFrame:show(Frame),
  wxPanel:connect(Canvas, paint, []),
  Background =wxImage:new("gray_1.png"),
  ClientDC = wxClientDC:new(Canvas),
  BackgroundBitmap = wxBitmap:new(Background),
  wxDC:drawBitmap(ClientDC, BackgroundBitmap, {0,0}),
  wxImage:destroy(Background),
  wxClientDC:destroy(ClientDC),
  State = #{canvas => Canvas , birdsImages => BirdsImages, env => WxEnv, com => COMM, background => BackgroundBitmap
    ,numDelivery => 0, morty => 4},
  {ok, waitForData, State}.

callback_mode() ->
  state_functions.

terminate(_Reason, _State, _Data) ->
  ok.

code_change(_Vsn, State, Data, _Extra) ->
  {ok,State,Data}.

loadBirds() ->
  #{1 => wxImage:new("red_t_1.png"),
    2 => wxImage:new("blue_t_1.png"),
    3 => wxImage:new("black_t_1.png"),
    4 => wxImage:new("orange_t_1.png"),
    5 => wxImage:new("yellow_t_1.png")}.

waitForData(info,_,State) ->
  {keep_state, State};

waitForData(cast,{data,Data},State = #{ morty := Morty}) ->
  NumOfDeliveries = maps:get(numDelivery, State),
  NewState=
    if
      NumOfDeliveries =:= 0 -> (getReady(State));
      true -> State#{ numDelivery := NumOfDeliveries + 1}
    end,
  paint(Data,NewState),
  if
    NumOfDeliveries  =:= Morty ->
      {next_state, paintData, NewState};
    true ->
      {keep_state, NewState}
  end;

waitForData(cast,paint,State) ->
  {next_state, paintData, State};

waitForData(cast,stop,State) ->
  userStop(State);

waitForData(cast,{down,Num},State) ->
  {keep_state, State#{ morty := Num}};

waitForData(cast,_,State) ->
  {keep_state, State}.

% ---- State 2 :  Paint data ------------------
% ---------------------------------------------

paintData(cast,paint,State) ->
  buildFrame(State),
  {next_state, waitForData, State#{numDelivery := 0}};

paintData(cast,{down,Num},State) ->
  {next_state, waitForData, State#{ morty := Num}};

paintData(info,_,State) ->
  {keep_state, State};

paintData(cast,stop,State) ->
  userStop(State);

paintData(cast,_,State) ->
  {keep_state, State}.


% ---------------------------------------------
% ---------------------------------------------

buildFrame(State) ->
  BufferDC = maps:get(bufferDC, State),
  ClientDC= maps:get(clientDC, State),
  wxBufferedDC:destroy(BufferDC),
  wxClientDC:destroy(ClientDC).

paint(Data, State) ->
  BirdsImages =maps:get(birdsImages, State),
  BufferDC=maps:get(bufferDC, State),
  paintBirds(BufferDC, BirdsImages, Data).

paintBirds(_, _, []) ->
  finishPaintBirds;

paintBirds(BufferDC, BirdsImages, [ {{X,Y},_,_,Color} | T ]) ->
  Coordinates = {round(X),round(Y)},
  AngelInRadians = 0,
  case Color of
    red ->
      Image= wxImage:rotate (maps:get(1,BirdsImages), AngelInRadians, {10,10}),
      Bitmap= wxBitmap:new(Image),
      wxDC:drawBitmap(BufferDC, Bitmap, Coordinates),
      wxBitmap:destroy(Bitmap),
      wxImage:destroy(Image);
    blue ->
      Image= wxImage:rotate (maps:get(2,BirdsImages), AngelInRadians, {10,10}),
      Bitmap= wxBitmap:new(Image),
      wxDC:drawBitmap(BufferDC, Bitmap, {50,50}),
      wxBitmap:destroy(Bitmap),
      wxImage:destroy(Image);
    black ->
      Image= wxImage:rotate (maps:get(3,BirdsImages), AngelInRadians, {10,10}),
      Bitmap= wxBitmap:new(Image),
      wxDC:drawBitmap(BufferDC, Bitmap, {50,50}),
      wxBitmap:destroy(Bitmap),
      wxImage:destroy(Image);
    orange ->
      Image= wxImage:rotate (maps:get(4,BirdsImages), AngelInRadians, {10,10}),
      Bitmap= wxBitmap:new(Image),
      wxDC:drawBitmap(BufferDC, Bitmap,{50,50}),
      wxBitmap:destroy(Bitmap),
      wxImage:destroy(Image);
    yellow ->
      Image= wxImage:rotate (maps:get(5,BirdsImages), AngelInRadians, {10,10}),
      Bitmap= wxBitmap:new(Image),
      wxDC:drawBitmap(BufferDC, Bitmap, {50,50}),
      wxBitmap:destroy(Bitmap),
      wxImage:destroy(Image)
  end,
  paintBirds(BufferDC, BirdsImages, T).


userStop(#{birdsImages := BirdsImages})->
  deleteImages(BirdsImages),
  wx:destroy(),
  gen_server:cast(comm,stop),
  gen_statem:stop(graphic).


deleteImages(Map) ->
  [wxImage:destroy(I) || I <- maps:values(Map)].


set_buttons(Panel, WxEnv,COMM) ->
  wx:set_env(WxEnv),
  Counter = wxTextCtrl:new(Panel, 10, [{value, "0"},{pos, {170, 5}}, {size,{30,30}}]),
  Button1 = wxButton:new(Panel, 11, [{label, "Start"}, {pos,{10, 20}},{size, {50, 50}}]),
  Button2 = wxButton:new(Panel, 12, [{label, "Stop"}, {pos,{70, 20}}, {size, {50, 50}}]),
  Font = wxFont:new(20, ?wxFONTFAMILY_DEFAULT, ?wxFONTSTYLE_NORMAL,?wxFONTWEIGHT_BOLD),
  wxTextCtrl:setFont(Counter, Font),
  wxPanel:connect(Panel, command_button_clicked),
  waitForInterupts(Counter,Button1,Button2,COMM).


waitForInterupts(Counter,Button1,Button2,COMM) ->
  InfoGui = receive
              #wx{id = 11, event=#wxCommand{type = command_button_clicked}} ->
                Number = list_to_integer(wxTextCtrl:getValue(Counter)),
                LabelPushed = wxButton:getLabel(Button1),
                case Number of
                  0 when LabelPushed =:= "Start" ->
                    nothing;
                  Number when LabelPushed =:= "Start" ->
                    wxButton:setLabel(Button1, "Add"),
                    {go,Number};
                  Number when LabelPushed =:= "Add" ->
                    {update,Number}
                end;
              #wx{id = 12, event=#wxCommand{type = command_button_clicked}} ->
                stop
            end,
  COMM!InfoGui,
  waitForInterupts(Counter,Button1,Button2,COMM).


getReady(State) ->
  Canvas = maps:get(canvas, State),
  ClientDC = wxClientDC:new(Canvas),
  BufferDC = wxBufferedDC:new(ClientDC),
  Background = maps:get(background, State),
  wxDC:drawBitmap(BufferDC, Background, {0,0}),
  State#{ clientDC => ClientDC ,bufferDC => BufferDC, numDelivery => 1}.

